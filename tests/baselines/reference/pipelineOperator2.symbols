=== tests/cases/conformance/expressions/pipelineOperator/pipelineOperator2.ts ===
declare const xs: number[];
>xs : Symbol(xs, Decl(pipelineOperator2.ts, 0, 13))

declare function map<T, U>(fn: (item: T) => U): (arr: T[]) => U[];
>map : Symbol(map, Decl(pipelineOperator2.ts, 0, 27))
>T : Symbol(T, Decl(pipelineOperator2.ts, 1, 21))
>U : Symbol(U, Decl(pipelineOperator2.ts, 1, 23))
>fn : Symbol(fn, Decl(pipelineOperator2.ts, 1, 27))
>item : Symbol(item, Decl(pipelineOperator2.ts, 1, 32))
>T : Symbol(T, Decl(pipelineOperator2.ts, 1, 21))
>U : Symbol(U, Decl(pipelineOperator2.ts, 1, 23))
>arr : Symbol(arr, Decl(pipelineOperator2.ts, 1, 49))
>T : Symbol(T, Decl(pipelineOperator2.ts, 1, 21))
>U : Symbol(U, Decl(pipelineOperator2.ts, 1, 23))

declare function filter<T>(fn: (item: T) => boolean): (arr: T[]) => T[];
>filter : Symbol(filter, Decl(pipelineOperator2.ts, 1, 66))
>T : Symbol(T, Decl(pipelineOperator2.ts, 2, 24))
>fn : Symbol(fn, Decl(pipelineOperator2.ts, 2, 27))
>item : Symbol(item, Decl(pipelineOperator2.ts, 2, 32))
>T : Symbol(T, Decl(pipelineOperator2.ts, 2, 24))
>arr : Symbol(arr, Decl(pipelineOperator2.ts, 2, 55))
>T : Symbol(T, Decl(pipelineOperator2.ts, 2, 24))
>T : Symbol(T, Decl(pipelineOperator2.ts, 2, 24))

const x = xs
>x : Symbol(x, Decl(pipelineOperator2.ts, 4, 5))
>xs : Symbol(xs, Decl(pipelineOperator2.ts, 0, 13))

    |> map((x: number) => x + 1)
>map : Symbol(map, Decl(pipelineOperator2.ts, 0, 27))
>x : Symbol(x, Decl(pipelineOperator2.ts, 5, 12))
>x : Symbol(x, Decl(pipelineOperator2.ts, 5, 12))

    |> filter((x: number) => x > 1)
>filter : Symbol(filter, Decl(pipelineOperator2.ts, 1, 66))
>x : Symbol(x, Decl(pipelineOperator2.ts, 6, 15))
>x : Symbol(x, Decl(pipelineOperator2.ts, 6, 15))

