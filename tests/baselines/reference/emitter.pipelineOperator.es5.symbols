=== tests/cases/conformance/emitter/es5/pipelineOperator/emitter.pipelineOperator.es5.ts ===
declare const xs: number[];
>xs : Symbol(xs, Decl(emitter.pipelineOperator.es5.ts, 0, 13))

declare function map<T, U>(arr: T[], fn: (item: T) => U): U[];
>map : Symbol(map, Decl(emitter.pipelineOperator.es5.ts, 0, 27))
>T : Symbol(T, Decl(emitter.pipelineOperator.es5.ts, 1, 21))
>U : Symbol(U, Decl(emitter.pipelineOperator.es5.ts, 1, 23))
>arr : Symbol(arr, Decl(emitter.pipelineOperator.es5.ts, 1, 27))
>T : Symbol(T, Decl(emitter.pipelineOperator.es5.ts, 1, 21))
>fn : Symbol(fn, Decl(emitter.pipelineOperator.es5.ts, 1, 36))
>item : Symbol(item, Decl(emitter.pipelineOperator.es5.ts, 1, 42))
>T : Symbol(T, Decl(emitter.pipelineOperator.es5.ts, 1, 21))
>U : Symbol(U, Decl(emitter.pipelineOperator.es5.ts, 1, 23))
>U : Symbol(U, Decl(emitter.pipelineOperator.es5.ts, 1, 23))

declare function identity<T>(value: T): T;
>identity : Symbol(identity, Decl(emitter.pipelineOperator.es5.ts, 1, 62))
>T : Symbol(T, Decl(emitter.pipelineOperator.es5.ts, 2, 26))
>value : Symbol(value, Decl(emitter.pipelineOperator.es5.ts, 2, 29))
>T : Symbol(T, Decl(emitter.pipelineOperator.es5.ts, 2, 26))
>T : Symbol(T, Decl(emitter.pipelineOperator.es5.ts, 2, 26))

const x = xs |> (_ => map(_, x => x + 1));
>x : Symbol(x, Decl(emitter.pipelineOperator.es5.ts, 4, 5))
>xs : Symbol(xs, Decl(emitter.pipelineOperator.es5.ts, 0, 13))
>_ : Symbol(_, Decl(emitter.pipelineOperator.es5.ts, 4, 17))
>map : Symbol(map, Decl(emitter.pipelineOperator.es5.ts, 0, 27))
>_ : Symbol(_, Decl(emitter.pipelineOperator.es5.ts, 4, 17))
>x : Symbol(x, Decl(emitter.pipelineOperator.es5.ts, 4, 28))
>x : Symbol(x, Decl(emitter.pipelineOperator.es5.ts, 4, 28))

const y = xs |> identity;
>y : Symbol(y, Decl(emitter.pipelineOperator.es5.ts, 5, 5))
>xs : Symbol(xs, Decl(emitter.pipelineOperator.es5.ts, 0, 13))
>identity : Symbol(identity, Decl(emitter.pipelineOperator.es5.ts, 1, 62))

