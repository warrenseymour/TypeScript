=== tests/cases/conformance/expressions/pipelineOperator/pipelineOperator.ts ===
declare const xs: number[];
>xs : Symbol(xs, Decl(pipelineOperator.ts, 0, 13))

declare function map<T, U>(arr: T[], fn: (item: T) => U): U[];
>map : Symbol(map, Decl(pipelineOperator.ts, 0, 27))
>T : Symbol(T, Decl(pipelineOperator.ts, 1, 21))
>U : Symbol(U, Decl(pipelineOperator.ts, 1, 23))
>arr : Symbol(arr, Decl(pipelineOperator.ts, 1, 27))
>T : Symbol(T, Decl(pipelineOperator.ts, 1, 21))
>fn : Symbol(fn, Decl(pipelineOperator.ts, 1, 36))
>item : Symbol(item, Decl(pipelineOperator.ts, 1, 42))
>T : Symbol(T, Decl(pipelineOperator.ts, 1, 21))
>U : Symbol(U, Decl(pipelineOperator.ts, 1, 23))
>U : Symbol(U, Decl(pipelineOperator.ts, 1, 23))

declare function filter<T>(arr: T[], fn: (item: T) => boolean): T[];
>filter : Symbol(filter, Decl(pipelineOperator.ts, 1, 62))
>T : Symbol(T, Decl(pipelineOperator.ts, 2, 24))
>arr : Symbol(arr, Decl(pipelineOperator.ts, 2, 27))
>T : Symbol(T, Decl(pipelineOperator.ts, 2, 24))
>fn : Symbol(fn, Decl(pipelineOperator.ts, 2, 36))
>item : Symbol(item, Decl(pipelineOperator.ts, 2, 42))
>T : Symbol(T, Decl(pipelineOperator.ts, 2, 24))
>T : Symbol(T, Decl(pipelineOperator.ts, 2, 24))

const x = xs
>x : Symbol(x, Decl(pipelineOperator.ts, 4, 5))
>xs : Symbol(xs, Decl(pipelineOperator.ts, 0, 13))

  |> (_ => map(_, x => x + 1))
>_ : Symbol(_, Decl(pipelineOperator.ts, 5, 6))
>map : Symbol(map, Decl(pipelineOperator.ts, 0, 27))
>_ : Symbol(_, Decl(pipelineOperator.ts, 5, 6))
>x : Symbol(x, Decl(pipelineOperator.ts, 5, 17))
>x : Symbol(x, Decl(pipelineOperator.ts, 5, 17))

  |> (_ => filter(_, x => x > 2));
>_ : Symbol(_, Decl(pipelineOperator.ts, 6, 6))
>filter : Symbol(filter, Decl(pipelineOperator.ts, 1, 62))
>_ : Symbol(_, Decl(pipelineOperator.ts, 6, 6))
>x : Symbol(x, Decl(pipelineOperator.ts, 6, 20))
>x : Symbol(x, Decl(pipelineOperator.ts, 6, 20))

